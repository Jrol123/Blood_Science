// Parameters
real nu = 1./100.;
real dt = 0.1;
real rc = 3e-3; //радиус капилляра
real re = 0.9*rc-0.2e-3; //радиус эритроцита  
//real re = 2.9e-3;

real kd = 0.4; // Коэффициент деформации
real H = 0.5; //линейная плотность эритроцитов

//? Циклы для вычисления значений
// for(real H = 0.1; H <= 0.5; H += 0.2)
// {

// int index = 0;
// real[int] MassRBC(6);
// real[int] MassPlasma(6);

// 	for (real kd = 0; kd <= 0.5; kd += 0.1)
// 	{

	real le = 88/pi/re^2*1e-9; //длина эритроцита
	real lp = le/H-le; //длина промежутка плазмы
	real ne = 3; //количество эритроцитов
	real L = ne*(le+lp); //длина капилляра
	real p0 = (5*L)/3*1000; //давление
	real d = le*kd; //деформация
	//* Utility
	//? Для вычисления скоростей
	int nx = 60;
	real xd = rc/nx;

	//* Генерация Mesh
	border C1(t = 0, rc)   {x=t;  y=0;  label = 1;} // Top
	border C2(t = 0, L)    {x=rc;  y=t;  label = 2;}
	border C3(t = 0,rc)    {x=rc-t; y=L;  label = 3;} // Bottom
	border C4(t = 0,L)     {x=0; y=L-t; label = 4;}

	mesh Th = buildmesh (C1(60) + C2(500) + C3(60) + C4(500));
	// plot(C1(60), wait=1);
	// plot(C2(500), wait=1);
	// plot(C3(60), wait=1);
	// plot(C4(500), wait=1);
	// plot(C1(60) + C2(500) + C3(60) + C4(500), wait=1);
	// plot(Th);

	//* Генерация функций и пространств
	//? Fespace. См. Документацию https://doc.freefem.org/models/navier-stokes-equations.html
	fespace Xh(Th, P2); // Пространство для скорости
	Xh u1, v1;
	Xh u2, v2, u2i;
	Xh up1, up2;
	Xh psi, phi;
	fespace Mh(Th, P1); // Пространство для давления
	Mh p, q;

	//? Эффективная вязкость (отличается для эритроцитов и плазмы (см. с.2))
	func real mu(real x, real y){
		if (x<re){
			for (int n=0; n<ne; n++){
				//if ((y>=(lp/2+(le+lp)*n))&&(y<=(lp/2+(le+lp)*n+le))) return 0.1; //! Неверно?
				if ((y>=(-d*(x^2/re^2-1)+(le+lp)*n+lp/2))&&
					(y<=((-d*(x^2/re^2-1)+(le+lp)*n+le+lp/2))))
					{
						//? RBC
						return 0.1;
					}
			}
		}
		//? Plasma
		return 0.001;
	}


	//* Солвер
	real eps = 1e-8;
	//? Объединение 2-х решений в одно
	solve Stokes ([u1, u2, p], [v1, v2, q])
		= int2d(Th)(
			( 2*x*mu(x,y)*dx(u1)*dx(v1) + x*mu(x,y)*(dy(u1)+dx(u2))*(dy(v1)+dx(v2))
			+ 2*x*mu(x,y)*dy(u2)*dy(v2) + 2*mu(x,y)*u1*v1/x)
			- p*q*eps*x
			- p*v1 - x*p*dx(v1) - x*p*dy(v2)
			+ q*u1 + x*dx(u1)*q + x*dy(u2)*q
		)-
		int1d(Th, 3) ( p0* x* v2)
		+ on(2, u1=0, u2=0)
		+ on(1, 3, u1=0, p=p0)
		+ on (3, p=0)
		;
	
	//* Графический вывод
	u2i=u2(3.e-3-x,y);
	plot(u2i, wait=true,value=true,fill=true); //!Uncomment!
	for (int i=0; i<=30; i++){//!Unomment?
	//	cout << u2i ( i*(1e-4), 5*L/12) << endl;
		cout << i*(1e-4) << endl; //!Unomment?
	}//!Unomment?

	//* Вычисление скоростей (RBC и плазма)
	// Integral of velocity, sum1 as in middle rbc, sum2 as in middle plasma
	//? Вычисление скоростей при помощи интегралов
	real sumRBC = 0;
	real sumPlasma = 0;
	for(int i=0; i<nx; i++) {
		sumRBC = sumRBC + u2(xd/2+i*xd, 0.8*le+0.5*lp)*(xd/2+i*xd)* xd;
		sumPlasma = sumPlasma + u2(xd/2+i*xd, le+1.3*lp)*(xd/2+i*xd)* xd;
	}

	//* Вывод доп. данных
	//? Часть цикла
	// MassRBC[index] = sumRBC* 2* pi;
	// MassPlasma[index] = sumPlasma* 2* pi;


	cout << "Blood flow rate = " << sumRBC* 2* pi << "     " << sumPlasma* 2* pi << endl;

	//real mapp = pi / 8 * rc^4 / L * p0 / (sumRBC* 2* pi);
	//cout << "Apparent viscosity = " << mapp << endl;

	// cout <<  sumPlasma* 2* pi << endl;
	//cout <<  re << endl;
	// cout << "index = " << index << "     " << "kd = " << kd << "     " << "d = " << d << endl;
	cout << endl << "kd = " << kd << "\t" << "d = " << d << endl;
//? Часть цикла
// 	index ++;
// 	}
// 	cout << endl << "Density = " << H << endl << MassRBC << endl << MassPlasma << endl << endl;
// }